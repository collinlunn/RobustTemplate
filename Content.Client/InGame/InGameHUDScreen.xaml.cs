using Content.Client.UI;
using Content.Shared.ContentCVars;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Timing;

namespace Content.Client.InGame;

[GenerateTypedNameReferences]
public sealed partial class InGameHUDScreen : UIScreen
{
	[Dependency] private readonly IGameTiming _gameTiming = default!;
	[Dependency] private readonly IEyeManager _eyeManager = default!;
	[Dependency] private readonly IConfigurationManager _configurationManager = default!;

	public InGameHUDScreen()
	{
		RobustXamlLoader.Load(this);
		IoCManager.InjectDependencies(this);

		var viewport = new MainViewportContainer(_eyeManager);
		CustomCursor.SetCursor(viewport);
		_eyeManager.MainViewport = viewport;
		ViewportBox.AddChild(viewport);
		SetAnchorPreset(ViewportBox, LayoutPreset.Wide);
		SetAnchorPreset(viewport, LayoutPreset.Wide);

		FpsBox.AddChild(new FpsCounter(_gameTiming));
		FpsBox.Visible = _configurationManager.GetCVar(ContentCVars.HudFpsVisible);
		_configurationManager.OnValueChanged(ContentCVars.HudFpsVisible, (visible) => 
		{ 
			FpsBox.Visible = visible;
		});
	}
}
