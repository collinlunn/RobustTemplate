using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Placement;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Enums;
using Robust.Shared.IoC;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using static Robust.Client.UserInterface.Controls.BaseButton;

namespace Content.Client.Mapping
{
	[GenerateTypedNameReferences]
	public sealed partial class EntitySpawnerControl : Control
	{
		[Dependency] private readonly IPlacementManager _placement = default!;
		[Dependency] private readonly IPrototypeManager _prototypes = default!;
		[Dependency] private readonly IResourceCache _resources = default!;

		public EntitySpawnerControl()
		{
			RobustXamlLoader.Load(this);
			IoCManager.InjectDependencies(this);
			ClearButton.OnPressed += _ =>
			{
				SearchBar.SetText(string.Empty);
				PrototypeList.DisposeAllChildren();
			};
			SearchBar.OnTextChanged += args => 
			{
				PrototypeList.DisposeAllChildren();
				if (args.Text != string.Empty)
					AddPrototypeButtons(args.Text);
			};
			EraseButton.OnToggled += _ =>
			{
				_placement.ToggleEraser();
			};
			_placement.PlacementChanged += (_, _) =>
			{
				PlacementChanged();
			};
		}

		private void BeginPlacing(EntitySpawnButton button)
		{
			EraseButton.Pressed = false; //If we are placing, we are no longer erasing
			var newObjInfo = new PlacementInformation
			{
				PlacementOption = button.Prototype.PlacementMode,
				EntityType = button.PrototypeID,
				Range = 2,
				IsTile = false
			};
			_placement.BeginPlacing(newObjInfo);
		}

		/// <summary>
		///		Triggered when the PlacementManager changes its status.
		///		Since the PlacementManager can be changed by something other than this UI, we need to catch any changes it makes
		///		and update the UI buttons.
		/// </summary>
		private void PlacementChanged()
		{
			if (_placement.Eraser)
				EraseButton.Pressed = true;
			else
				EraseButton.Pressed = false;
		}

		#region Prototype Button Maker

		private void AddPrototypeButtons(string searchText)
		{
			var prototypes = GetPrototypes(searchText);
			prototypes.Sort((a, b) => string.Compare(a.Name, b.Name, StringComparison.Ordinal));

			var index = 0;
			foreach (var prototype in prototypes)
			{
				var prototypeButton = MakePrototypeButton(prototype, index);
				prototypeButton.ActualButton.OnPressed += _ => BeginPlacing(prototypeButton);
				PrototypeList.AddChild(prototypeButton);
				index++;
			}
		}

		private EntitySpawnButton MakePrototypeButton(EntityPrototype prototype, int index)
		{
			var prototypeButton = new EntitySpawnButton
			{
				Prototype = prototype,
				Index = index // We track this index purely for debugging.
			};
			prototypeButton.EntityLabel.Text = PrototypeLabelText(prototype);
			prototypeButton.EntityTextureRects.Textures = SpriteComponent.GetPrototypeTextures(prototype, _resources).Select(o => o.Default).ToList();
			return prototypeButton;

			
			
			string PrototypeLabelText(EntityPrototype prototype)
			{
				var name = prototype.Name != string.Empty ? prototype.Name : prototype.ID;
				var suffix = prototype.EditorSuffix;
				if (suffix != null && suffix != string.Empty)
				{
					name += $" [{prototype.EditorSuffix}]";
				}
				return name;
			}
		}

		private List<EntityPrototype> GetPrototypes(string searchText)
		{
			var prototypes = new List<EntityPrototype>();
			foreach (var prototype in _prototypes.EnumeratePrototypes<EntityPrototype>())
			{
				if (!prototype.Abstract && !prototype.NoSpawn && PrototypeMatchesSearch(prototype, searchText))
				{
					prototypes.Add(prototype);
				}
			}
			return prototypes;



			bool PrototypeMatchesSearch(EntityPrototype prototype, string searchText)
			{
				DebugTools.Assert(searchText != string.Empty);

				if (prototype.ID.Contains(searchText, StringComparison.InvariantCultureIgnoreCase))
					return true;

				if (prototype.EditorSuffix != null &&
					prototype.EditorSuffix.Contains(searchText, StringComparison.InvariantCultureIgnoreCase))
					return true;

				if (prototype.Name != string.Empty &&
					prototype.Name.Contains(searchText, StringComparison.InvariantCultureIgnoreCase))
					return true;

				return false;
			}
		}

		#endregion
	}
}
