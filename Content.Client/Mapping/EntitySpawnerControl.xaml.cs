using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

namespace Content.Client.Mapping
{
	[GenerateTypedNameReferences]
	public sealed partial class EntitySpawnerControl : Control
	{
		[Dependency] private readonly IPrototypeManager _prototypes = default!;
		[Dependency] private readonly IResourceCache _resources = default!;

		public EntitySpawnerControl()
		{
			RobustXamlLoader.Load(this);
			IoCManager.InjectDependencies(this);
			ClearButton.OnPressed += _ =>
			{
				SearchBar.SetText(string.Empty, true);
			};
			SearchBar.OnTextChanged += args => 
			{
				PrototypeList.DisposeAllChildren();
				if (args.Text != string.Empty)
					PopulatePrototypeList(args.Text);
			};
		}

		private void PopulatePrototypeList(string searchText)
		{
			var prototypes = GetPrototypes(searchText);
			prototypes.Sort((a, b) => string.Compare(a.Name, b.Name, StringComparison.Ordinal));

			var index = 0;
			foreach (var prototype in prototypes)
			{
				var prototypeButton = MakePrototypeButton(prototype, index);
				PrototypeList.AddChild(prototypeButton);
				index++;
			}
		}

		private EntitySpawnButton MakePrototypeButton(EntityPrototype prototype, int index)
		{
			var prototypeButton = new EntitySpawnButton
			{
				Prototype = prototype,
				Index = index // We track this index purely for debugging.
			};
			prototypeButton.EntityLabel.Text = PrototypeLabelText(prototype);
			prototypeButton.EntityTextureRects.Textures = SpriteComponent.GetPrototypeTextures(prototype, _resources).Select(o => o.Default).ToList();
			return prototypeButton;
		}

		private List<EntityPrototype> GetPrototypes(string searchText)
		{
			var prototypes = new List<EntityPrototype>();
			foreach (var prototype in _prototypes.EnumeratePrototypes<EntityPrototype>())
			{
				if (!prototype.Abstract && !prototype.NoSpawn && PrototypeMatchesSearch(prototype, searchText))
				{
					prototypes.Add(prototype);
				}
			}
			return prototypes;
		}

		private bool PrototypeMatchesSearch(EntityPrototype prototype, string searchText)
		{
			DebugTools.Assert(searchText != string.Empty);

			if (prototype.ID.Contains(searchText, StringComparison.InvariantCultureIgnoreCase))
				return true;

			if (prototype.EditorSuffix != null &&
				prototype.EditorSuffix.Contains(searchText, StringComparison.InvariantCultureIgnoreCase))
				return true;

			if (prototype.Name != string.Empty && 
				prototype.Name.Contains(searchText, StringComparison.InvariantCultureIgnoreCase))
				return true;

			return false;
		}

		private string PrototypeLabelText(EntityPrototype prototype)
		{
			var name = prototype.Name != string.Empty ? prototype.Name : prototype.ID;
			var suffix = prototype.EditorSuffix;
			if (suffix != null && suffix != string.Empty)
			{
				name += $" [{prototype.EditorSuffix}]";
			}
			return name;
		}
	}
}
