using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.Player;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Map;
using System.Diagnostics.CodeAnalysis;

namespace Content.Client.Mapping
{
	[GenerateTypedNameReferences]
	public sealed partial class MappingCommandWindow : DefaultWindow
	{
		[Dependency] private readonly IClientConsoleHost _console = default!;
		[Dependency] private readonly IPlayerManager _playerManager = default!;
		[Dependency] private readonly IEntityManager _entityManager = default!;
		[Dependency] private readonly IMapManager _mapManager = default!;

		public MappingCommandWindow()
		{
			RobustXamlLoader.Load(this);
			IoCManager.InjectDependencies(this);

			LoadMapFromMapsButton.OnPressed += _ => LoadMap($"Maps/{LoadPathFromMaps.Text}");
			LoadMapFromBinButton.OnPressed += _ => LoadMap($"../bin/Content.Server/data/{LoadPathFromBin.Text}");
			SaveMapButton.OnPressed += _ => SaveMap();
		}

		private void LoadMap(string path)
		{
			var mapId = _mapManager.NextMapId();
			_console.ExecuteCommand($"loadmap {mapId} {path}");
			_console.ExecuteCommand($"tp 0 0 {mapId}");
		}

		private void SaveMap()
		{
			if (GetCurrentMapId(out var mapId))
			{
				_console.ExecuteCommand($"savemap {mapId} {SavePath.Text}");
			}
		}

		private bool GetCurrentMapId([NotNullWhen(true)] out MapId? mapId)
		{
			mapId = null;
			if (_playerManager?.LocalPlayer?.ControlledEntity is not EntityUid player)
			{
				return false;
			}
			if (!_entityManager.TryGetComponent<TransformComponent>(player, out var transform))
			{
				return false;
			}
			mapId = transform.MapID;
			return true;
		}
	}
}
