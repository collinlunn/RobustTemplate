using Content.Shared.Input;
using Robust.Client.AutoGenerated;
using Robust.Client.Input;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;
using Robust.Shared.Timing;
using Robust.Shared.Utility;
using static Robust.Client.Input.Keyboard;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client.OptionsMenu
{
	[GenerateTypedNameReferences]
	public sealed partial class HotkeyTab : Control
	{
		[Dependency] private readonly IInputManager _inputManager = default!;

		private readonly List<Action> _keybindResets = new();

		private readonly List<Key> _heldKeys = new();

		public HotkeyTab()
		{
			RobustXamlLoader.Load(this);
			IoCManager.InjectDependencies(this);

			foreach (var hotkeySet in GetHotkeySets())
			{
				KeybindsContainer.AddChild(new Label { Text = hotkeySet.CategoryName });

				foreach (var hotkey in hotkeySet.Hotkeys)
				{
					var hotkeyBox = new HotKeyBox(hotkey);
					KeybindsContainer.AddChild(hotkeyBox);
					ResetAllButton.OnPressed += _ => ResetKeybind(hotkeyBox);
					hotkeyBox.ResetButton.OnPressed += _ => ResetKeybind(hotkeyBox);
					hotkeyBox.RebindButton.OnButtonUp += _ => StartRebinding(hotkeyBox);
					UpdateButtons(hotkeyBox);
				}
			}
		}

		private void ResetKeybind(HotKeyBox hotkeyBox)
		{
			_keybindResets.Add(() =>
			{
				_inputManager.ResetBindingsFor(hotkeyBox.Function);
				_inputManager.SaveToUserData();
				UpdateButtons(hotkeyBox);
			});
		}

		private void UpdateButtons(HotKeyBox hotkeyBox)
		{
			hotkeyBox.RebindButton.Text = _inputManager.GetKeyBinding(hotkeyBox.Function)
				.GetKeyString();

			hotkeyBox.ResetButton.Disabled = !_inputManager.IsKeyFunctionModified(hotkeyBox.Function);
		}

		private void StartRebinding(HotKeyBox hotkeyBox)
		{
			hotkeyBox.RebindButton.Text = "Rebinding...";

			KeyEventAction handler = (_, _) => { };
			handler = (keyEvent, type) => InterceptInput(keyEvent, type, handler, hotkeyBox);
			_inputManager.FirstChanceOnKeyEvent += handler;
		}

		private void InterceptInput(KeyEventArgs keyEvent, KeyEventType type, KeyEventAction handler, HotKeyBox hotkeyBox)
		{
			if (type == KeyEventType.Down)
			{
				_heldKeys.Add(keyEvent.Key);
				return;
			}
			var currentBind = _inputManager.GetKeyBinding(hotkeyBox.Function);

			_heldKeys.TryGetValue(0, out var primaryKey);
			_heldKeys.TryGetValue(1, out var mod1);
			_heldKeys.TryGetValue(2, out var mod2);
			_heldKeys.TryGetValue(3, out var mod3);

			var newBind = new KeyBindingRegistration
			{
				Function = currentBind.Function,
				BaseKey = primaryKey,
				Mod1 = mod1,
				Mod2 = mod2,
				Mod3 = mod3,
				Priority = currentBind.Priority,
				Type = currentBind.BindingType,
				CanFocus = currentBind.CanFocus,
				CanRepeat = currentBind.CanRepeat,
			};
			_inputManager.RemoveBinding(currentBind);
			_inputManager.RegisterBinding(newBind);
			_inputManager.SaveToUserData();
			_inputManager.FirstChanceOnKeyEvent -= handler;
			_heldKeys.Clear();
			UpdateButtons(hotkeyBox);
		}

		protected override void FrameUpdate(FrameEventArgs args)
		{
			base.FrameUpdate(args);

			foreach (var command in _keybindResets)
			{
				command();
			}
			_keybindResets.Clear();
		}

		private sealed class HotKeyBox : Control
		{
			public readonly Button RebindButton;
			public readonly Button ResetButton;
			public readonly BoundKeyFunction Function;

			public HotKeyBox(BoundKeyFunction function)
			{
				IoCManager.InjectDependencies(this);
				Function = function;

				var functionLabel = new Label
				{
					Text = CaseConversion.PascalToKebab(Function.FunctionName),
					MinWidth = 300f,
				};
				RebindButton = new Button { MinWidth = 150f };
				ResetButton = new Button { Text = "Reset" };
				AddChild(new BoxContainer
				{
					Orientation = LayoutOrientation.Horizontal,
					Children =
					{
						functionLabel,
						RebindButton,
						ResetButton,
					}
				});
			}
		}

		private List<HotkeySet> GetHotkeySets()
		{
			var movementKeys = new HotkeySet("Movement",
				new List<BoundKeyFunction>
				{
					EngineKeyFunctions.MoveUp,
					EngineKeyFunctions.MoveDown,
					EngineKeyFunctions.MoveLeft,
					EngineKeyFunctions.MoveRight,
				});
			var mappingKeys = new HotkeySet("Mapping",
				new List<BoundKeyFunction>
				{
					ContentKeyFunctions.OpenMappingCommandWindow,
					ContentKeyFunctions.OpenEntitySpawnWindow,
					ContentKeyFunctions.OpenTileSpawnWindow,
					EngineKeyFunctions.EditorPlaceObject,
					EngineKeyFunctions.EditorCancelPlace,
					EngineKeyFunctions.EditorGridPlace,
					EngineKeyFunctions.EditorLinePlace,
					EngineKeyFunctions.EditorRotateObject,
				});
			var devKeys = new HotkeySet("Development",
				new List<BoundKeyFunction>
				{
					EngineKeyFunctions.ShowDebugConsole,
					EngineKeyFunctions.ShowDebugMonitors,
					EngineKeyFunctions.HideUI,
				});

			return new List<HotkeySet>
			{
				movementKeys,
				mappingKeys,
				devKeys,
			};
		}

		private sealed class HotkeySet
		{
			public string CategoryName { get; private set; }

			public List<BoundKeyFunction> Hotkeys { get; private set; }

			public HotkeySet(string categoryName, List<BoundKeyFunction> hotkeys)
			{
				CategoryName = categoryName;
				Hotkeys = hotkeys;
			}
		}
	}
}
