using Content.Client.Audio;
using Content.Shared.ContentCVars;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared;
using Robust.Shared.Configuration;
using System;
using Range = Robust.Client.UserInterface.Controls.Range;

namespace Content.Client.OptionsMenu
{
	[GenerateTypedNameReferences]
	public sealed partial class AudioTab : Control
	{
		[Dependency] private readonly IConfigurationManager _cfg = default!;
		[Dependency] private readonly MainMenuAudio _audio = default!;

		public AudioTab()
		{
			RobustXamlLoader.Load(this);
			IoCManager.InjectDependencies(this);

			ApplyButton.OnPressed += _ => ApplyPressed();
			_audio.AddButtonSound("pop.wav", ApplyButton);

			MasterVolumeSlider.Value = _cfg.GetCVar(CVars.AudioMasterVolume) * 100;
			MusicVolumeSlider.Value = _cfg.GetCVar(ContentCVars.MusicVolume) * 100;
			GuiEffectsVolumeSlider.Value = _cfg.GetCVar(ContentCVars.GuiEffectsVolume) * 100;
			GameEffectsVolumeSlider.Value = _cfg.GetCVar(ContentCVars.GameEffectsVolume) * 100;
			AmbienceVolumeSlider.Value = _cfg.GetCVar(ContentCVars.AmbienceVolume) * 100;

			CurrentMasterVolumeLabel.Text = $"{MasterVolumeSlider.Value}%";
			CurrentMusicVolumeLabel.Text = $"{MusicVolumeSlider.Value}%";
			CurrentGuiEffectsVolumeLabel.Text = $"{GuiEffectsVolumeSlider.Value}%";
			CurrentGameEffectsVolumeLabel.Text = $"{GameEffectsVolumeSlider.Value}%";
			CurrentAmbienceVolumeLabel.Text = $"{AmbienceVolumeSlider.Value}%";

			MasterVolumeSlider.OnValueChanged += range => { CurrentMasterVolumeLabel.Text = $"{range.Value}%"; };
			MusicVolumeSlider.OnValueChanged += range => { CurrentMusicVolumeLabel.Text = $"{range.Value}%"; };
			GuiEffectsVolumeSlider.OnValueChanged += range => { CurrentGuiEffectsVolumeLabel.Text = $"{range.Value}%"; };
			GameEffectsVolumeSlider.OnValueChanged += range => { CurrentGameEffectsVolumeLabel.Text = $"{range.Value}%"; };
			AmbienceVolumeSlider.OnValueChanged += range => { CurrentAmbienceVolumeLabel.Text = $"{range.Value}%"; };

		}

		private void ApplyPressed()
		{
			_cfg.SetCVar(CVars.AudioMasterVolume, MasterVolumeSlider.Value / 100);
			_cfg.SetCVar(ContentCVars.MusicVolume, MusicVolumeSlider.Value / 100);
			_cfg.SetCVar(ContentCVars.GuiEffectsVolume, GuiEffectsVolumeSlider.Value / 100);
			_cfg.SetCVar(ContentCVars.GameEffectsVolume, GameEffectsVolumeSlider.Value / 100);
			_cfg.SetCVar(ContentCVars.AmbienceVolume, AmbienceVolumeSlider.Value / 100);
		}
	}
}
