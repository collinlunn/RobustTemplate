using Content.Client.Audio;
using Content.Shared.ContentCVars;
using FastAccessors;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared;
using Robust.Shared.Configuration;
using Robust.Shared.Utility;
using static Robust.Client.Input.Mouse;

namespace Content.Client.OptionsMenu
{
	[GenerateTypedNameReferences]
	public sealed partial class GraphicsTab : Control
	{
		[Dependency] private readonly IConfigurationManager _cfg = default!;
		[Dependency] private readonly ILogManager _logMan = default!;

		private readonly ISawmill _logger;

		private readonly List<float> _availableUiSizes = new() { 0.5f, 1, 1.5f, 2 };

		private ContentRadioOptions<float> _uiSizeRadio;
		private ContentRadioOptions<int> _windowModeRadio;

		public GraphicsTab()
		{
			RobustXamlLoader.Load(this);
			IoCManager.InjectDependencies(this);
			_logger = _logMan.GetSawmill("ui.graphicsOptions");

			ApplyButton.OnPressed += _ => ApplyPressed();
			ResetButton.OnPressed += _ => Reset();

			_uiSizeRadio = new();
			_uiSizeRadio.AddButton($"OS Auto: { UserInterfaceManager.DefaultUIScale * 100}%", 0);
			foreach (var size in _availableUiSizes)
			{
				_uiSizeRadio.AddButton($"{size * 100}%", size);
			}
			UiSizeBox.AddChild(_uiSizeRadio);

			_windowModeRadio = new();
			foreach (var mode in Enum.GetValues(typeof(WindowMode)))
			{
				_windowModeRadio.AddButton($"{mode.ToString()}", (byte) mode);
			}
			WindowModeBox.AddChild(_windowModeRadio);

			UpdateButtons();

			VSyncCheckBox.OnPressed += _ => UpdateApplyResetStatus();
			FpsCounterCheckBox.OnPressed += _ => UpdateApplyResetStatus();
			PingCounterCheckBox.OnPressed += _ => UpdateApplyResetStatus();
			_uiSizeRadio.OptionSelected += _ => UpdateApplyResetStatus();
			_windowModeRadio.OptionSelected += _ => UpdateApplyResetStatus();
		}

		public void UpdateButtons()
		{
			VSyncCheckBox.Pressed = _cfg.GetCVar(CVars.DisplayVSync);
			FpsCounterCheckBox.Pressed = _cfg.GetCVar(ContentCVars.HudFpsVisible);
			PingCounterCheckBox.Pressed = _cfg.GetCVar(ContentCVars.HudPingVisible);

			var scale = _cfg.GetCVar(CVars.DisplayUIScale);
			if (!_uiSizeRadio.TrySetValue(scale))
				_logger.Error($"Could not set ui scale radio to {scale}");

			var mode = _cfg.GetCVar(CVars.DisplayWindowMode);
			if (!_windowModeRadio.TrySetValue(mode))
				_logger.Error($"Could not set window mode radio to {mode}");

			UpdateApplyResetStatus();
		}

		private void ApplyPressed()
		{
			_cfg.SetCVar(CVars.DisplayVSync, VSyncCheckBox.Pressed);
			_cfg.SetCVar(CVars.DisplayWindowMode, _windowModeRadio.SelectedValue);
			_cfg.SetCVar(ContentCVars.HudFpsVisible, FpsCounterCheckBox.Pressed);
			_cfg.SetCVar(ContentCVars.HudPingVisible, PingCounterCheckBox.Pressed);
			_cfg.SetCVar(CVars.DisplayUIScale, _uiSizeRadio.SelectedValue);
			UpdateButtons();
			_cfg.SaveToFile();
		}

		private void Reset()
		{
			_cfg.SetCVar(CVars.DisplayVSync, CVars.DisplayVSync.DefaultValue);
			_cfg.SetCVar(CVars.DisplayWindowMode, CVars.DisplayWindowMode.DefaultValue);
			_cfg.SetCVar(ContentCVars.HudFpsVisible, ContentCVars.HudFpsVisible.DefaultValue);
			_cfg.SetCVar(ContentCVars.HudPingVisible, ContentCVars.HudPingVisible.DefaultValue);
			_cfg.SetCVar(CVars.DisplayUIScale, CVars.DisplayUIScale.DefaultValue);
			UpdateButtons();
			_cfg.SaveToFile();
		}

		private void UpdateApplyResetStatus()
		{
			var allMatchCurrent =
				(VSyncCheckBox.Pressed == _cfg.GetCVar(CVars.DisplayVSync)) &&
				(_windowModeRadio.SelectedValue == _cfg.GetCVar(CVars.DisplayWindowMode)) &&
				(FpsCounterCheckBox.Pressed == _cfg.GetCVar(ContentCVars.HudFpsVisible)) &&
				(PingCounterCheckBox.Pressed == _cfg.GetCVar(ContentCVars.HudPingVisible)) &&
				(_uiSizeRadio.SelectedValue == _cfg.GetCVar(CVars.DisplayUIScale));

			var allMatchDefault =
				(VSyncCheckBox.Pressed == CVars.DisplayVSync.DefaultValue) &&
				(_windowModeRadio.SelectedValue == CVars.DisplayWindowMode.DefaultValue) &&
				(FpsCounterCheckBox.Pressed == ContentCVars.HudFpsVisible.DefaultValue) &&
				(PingCounterCheckBox.Pressed == ContentCVars.HudPingVisible.DefaultValue) &&
				(_uiSizeRadio.SelectedValue == CVars.DisplayUIScale.DefaultValue);

			ApplyButton.Disabled = allMatchCurrent;
			ResetButton.Disabled = allMatchDefault;
		}

		public void OnClosed()
		{
			//if apply wasn't pressed, the buttons will look incorrect on next open
			UpdateButtons();
		}
	}
}
