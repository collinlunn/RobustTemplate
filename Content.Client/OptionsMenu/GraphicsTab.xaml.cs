using Content.Client.Audio;
using Content.Shared.ContentCVars;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared;
using Robust.Shared.Configuration;

namespace Content.Client.OptionsMenu
{
	[GenerateTypedNameReferences]
	public sealed partial class GraphicsTab : Control
	{
		[Dependency] private readonly IConfigurationManager _cfg = default!;
		[Dependency] private readonly MainMenuAudio _audio = default!;

		public GraphicsTab()
		{
			RobustXamlLoader.Load(this);
			IoCManager.InjectDependencies(this);

			ApplyButton.OnPressed += _ => ApplyPressed();
			_audio.AddButtonSound("pop.wav",
				ApplyButton,
				VSyncCheckBox,
				FullscreenCheckBox,
				FpsCounterCheckBox,
				PingCounterCheckBox);

			UpdateButtons();
		}

		public void UpdateButtons()
		{
			VSyncCheckBox.Pressed = _cfg.GetCVar(CVars.DisplayVSync);
			FullscreenCheckBox.Pressed = _cfg.GetCVar(CVars.DisplayWindowMode) == (int)WindowMode.Fullscreen;
			FpsCounterCheckBox.Pressed = _cfg.GetCVar(ContentCVars.HudFpsVisible);
			PingCounterCheckBox.Pressed = _cfg.GetCVar(ContentCVars.HudPingVisible);

			UIScaleSlider.Value = (_cfg.GetCVar(CVars.DisplayUIScale) - 1) * 4;
			CurrentUIScaleLabel.Text = $"{100 + UIScaleSlider.Value * 25}%";
			UIScaleSlider.OnValueChanged += range => { CurrentUIScaleLabel.Text = $"{100 + range.Value * 25}%"; };
		}

		private void ApplyPressed()
		{
			_cfg.SetCVar(CVars.DisplayVSync, VSyncCheckBox.Pressed);
			_cfg.SetCVar(CVars.DisplayWindowMode,
						 (int)(FullscreenCheckBox.Pressed ? WindowMode.Fullscreen : WindowMode.Windowed));
			_cfg.SetCVar(ContentCVars.HudFpsVisible, FpsCounterCheckBox.Pressed);
			_cfg.SetCVar(ContentCVars.HudPingVisible, PingCounterCheckBox.Pressed);
			_cfg.SetCVar(CVars.DisplayUIScale, 1f + UIScaleSlider.Value * 0.25f);
		}
	}
}
