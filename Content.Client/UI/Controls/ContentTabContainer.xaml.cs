using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.UI.Controls
{
	[GenerateTypedNameReferences]
	public sealed partial class ContentTabContainer : Control
	{
		private readonly List<TabData> _tabData = new();

		public ContentTabContainer()
		{
			RobustXamlLoader.Load(this);
			IoCManager.InjectDependencies(this);
			OnChildAdded += AddTab;
		}

		private void AddTab(Control newChild)
		{
			//a bit jank but whatever
			if (newChild is not ContentTab tab)
			{
				return;
			}
			RemoveChild(newChild);

			var selectorButton = new Button()
			{
				Text = tab.TabName,
			};
			var tabData = new TabData(tab, selectorButton);
			_tabData.Add(tabData);

			TabButtonHolder.AddChild(selectorButton);
			TabPanel.AddChild(newChild);
			newChild.Visible = false;
			selectorButton.OnPressed += _ => SetActiveTab(tabData);

			//when adding first tab, make it active
			if (_tabData.Count == 1)
			{
				SetActiveTab(tabData);
			}
		}

		private void SetActiveTab(TabData activeTab)
		{
			foreach (var tabData in _tabData)
			{
				tabData.Tab.Visible = false;
				tabData.SelectorButton.SetClickPressed(false);
			}
			activeTab.Tab.Visible = true;
			activeTab.SelectorButton.SetClickPressed(true);

		}

		private record TabData(ContentTab Tab, Button SelectorButton);
	}

	public sealed class ContentTab : Control
	{
		public string TabName { get; set; } = "Placeholder Tab Name";
	}
}
